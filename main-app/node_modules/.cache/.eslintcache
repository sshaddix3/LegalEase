[{"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\index.js":"1","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\App.js":"2","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\reportWebVitals.js":"3","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Home.js":"4","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Login.js":"5","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\PasswordReset.js":"6","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Register.js":"7","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\FormV3.js":"8","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Questions\\Question1.js":"9","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Questions\\Question4.js":"10","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Questions\\Question1a.js":"11","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Questions\\Question3.js":"12","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Info\\Infotest.js":"13","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Questions\\Question2.js":"14","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Nav\\NavMenu.js":"15","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\PDFbutton.js":"16","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\pdfButton.js":"17","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\PDFButton.js":"18","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\ClientList.js":"19","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\AddClients.js":"20","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\ClientListRow.js":"21","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\ClientListAttempt2.js":"22","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\ClientListShow.js":"23"},{"size":500,"mtime":1639768579564,"results":"24","hashOfConfig":"25"},{"size":935,"mtime":1628705360116,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"25"},{"size":3138,"mtime":1670304876844,"results":"28","hashOfConfig":"25"},{"size":3760,"mtime":1639768560645,"results":"29","hashOfConfig":"25"},{"size":2170,"mtime":1626042462362,"results":"30","hashOfConfig":"25"},{"size":4483,"mtime":1628705059223,"results":"31","hashOfConfig":"25"},{"size":7479,"mtime":1627781007033,"results":"32","hashOfConfig":"25"},{"size":2778,"mtime":1627547094692,"results":"33","hashOfConfig":"25"},{"size":2238,"mtime":1630687707034,"results":"34","hashOfConfig":"25"},{"size":2254,"mtime":1630687700512,"results":"35","hashOfConfig":"25"},{"size":2288,"mtime":1630687691992,"results":"36","hashOfConfig":"25"},{"size":1297,"mtime":1626819201220,"results":"37","hashOfConfig":"25"},{"size":2286,"mtime":1630687684926,"results":"38","hashOfConfig":"25"},{"size":3701,"mtime":1626824258718,"results":"39","hashOfConfig":"25"},{"size":1046,"mtime":1627782386416,"results":"40","hashOfConfig":"41"},{"size":1046,"mtime":1627782386416,"results":"42","hashOfConfig":"41"},{"size":1046,"mtime":1627782386416,"results":"43","hashOfConfig":"25"},{"size":494,"mtime":1633288016103,"results":"44","hashOfConfig":"25"},{"size":6111,"mtime":1633288014175,"results":"45","hashOfConfig":"25"},{"size":2917,"mtime":1633742046198,"results":"46","hashOfConfig":"25"},{"size":9108,"mtime":1636945236987,"results":"47","hashOfConfig":"25"},{"size":4526,"mtime":1633475064536,"results":"48","hashOfConfig":"25"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vtmf1k",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vyz49m",{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\index.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\App.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\reportWebVitals.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Home.js",["101"],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Login.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\PasswordReset.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Register.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\FormV3.js",["102"],"import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport Question1 from './Questions/Question1';\r\nimport Question1a from './Questions/Question1a';\r\nimport Question2 from './Questions/Question2';\r\nimport Question3 from './Questions/Question3';\r\nimport Question4 from './Questions/Question4';\r\nimport Infotest from './Info/Infotest';\r\nimport NavMenu from './Nav/NavMenu';\r\nimport PDFButton from './PDFButton';\r\n\r\nconst progBarQuestions = {\r\n    q1: \"\",\r\n    q2: \"\",\r\n    q3: \"\",\r\n    q4: \"\",\r\n};\r\n\r\nconst answers = {\r\n    q1: \"\",\r\n    q1a: \"\",\r\n    q2: \"\",\r\n    q3: \"\",\r\n    q4: \"\",\r\n};\r\n\r\nclass FormV3 extends Component {\r\n   \r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            currentQuestion: \"q1\",\r\n            showInfoState: false,\r\n            questionCounter: 0,\r\n            progress: null,\r\n            navButton: false,\r\n        };\r\n    }\r\n    \r\n    progressBar = () => {\r\n        let numOfQuestionsAnswered = 0;\r\n        let numOfQuestions = 0;\r\n\r\n        for(const property in progBarQuestions){\r\n            if(progBarQuestions[property].length > 0){\r\n                numOfQuestionsAnswered++;\r\n            }\r\n            numOfQuestions++;\r\n        }\r\n        const progress = (numOfQuestionsAnswered / numOfQuestions);\r\n        this.setState({\r\n            progress: progress\r\n        })\r\n    }\r\n\r\n    onNavButton = () => {\r\n        if(this.state.navButton === false){\r\n            this.setState({\r\n                navButton: true\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n                navButton: false\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    onBackButton = (event) => {\r\n        event.preventDefault();\r\n        \r\n        const questions = this.getQuestions()\r\n        const currentQIndex = questions.indexOf(this.state.currentQuestion);\r\n\r\n\r\n        const lastQIndex = currentQIndex - 1;\r\n        \r\n        this.setState({\r\n            currentQuestion: questions[lastQIndex],\r\n            showInfoState: false,\r\n        })\r\n    }\r\n\r\n    onInfoButton = (event) =>{\r\n        event.preventDefault();\r\n        if(this.state.showInfoState === false){\r\n            this.setState({\r\n                showInfoState: true\r\n            })\r\n        }\r\n\r\n        if(this.state.showInfoState === true){\r\n            this.setState({\r\n                showInfoState: false\r\n            })\r\n        }\r\n    }\r\n\r\n    jumpQuestions = (questionToGoTo) =>{\r\n        const questions = this.getQuestions();\r\n        const indexToGoTo = questions.indexOf(questionToGoTo)\r\n\r\n        this.setState({\r\n            currentQuestion: questions[indexToGoTo],\r\n            showInfoState: false\r\n        }, () => {this.progressBar()})\r\n\r\n    }\r\n\r\n    getQuestions = () => {\r\n        const questions = [\"q1\"];\r\n\r\n        if(answers[\"q1\"] === \"YES\"){\r\n            questions.push(\"q1a\")\r\n        }\r\n\r\n        questions.push(\"q2\");\r\n        questions.push(\"q3\");\r\n        questions.push(\"q4\");\r\n\r\n        return questions;\r\n    }\r\n\r\n    onQuestionResponseChange = (questionName, questionAnswer) => {\r\n        answers[questionName] = questionAnswer;\r\n        if(progBarQuestions.hasOwnProperty(`${questionName}`)){\r\n            progBarQuestions[questionName] = questionAnswer;\r\n        }\r\n    }\r\n\r\n    onQuestionSubmit = (questionName, questionAnswer) => {\r\n        \r\n        console.log(\"Submitting \" + questionName);\r\n        answers[questionName] = questionAnswer;\r\n        if(progBarQuestions.hasOwnProperty(`${questionName}`)){\r\n            progBarQuestions[questionName] = questionAnswer;\r\n        }\r\n\r\n        // get question list\r\n        const questions = this.getQuestions();\r\n    \r\n        // find the current question in list\r\n        const currentQIndex = questions.indexOf(questionName);\r\n    \r\n        // find the next question in the list\r\n        const nextQIndex = currentQIndex + 1;\r\n\r\n        if(this.state.currentQuestion === questions[questions.length - 1]){\r\n            console.log(answers);\r\n        }\r\n\r\n        this.setState({\r\n            currentQuestion: questions[nextQIndex],\r\n            showInfoState: false\r\n        }, () => {this.progressBar()})\r\n        \r\n\r\n    }\r\n   \r\n    render() {\r\n\r\n        const {currentQuestion} = this.state;\r\n        \r\n        const progressBarStylePercent = this.state.progress * 100;\r\n        const progressBarPercentRounded = Math.round(progressBarStylePercent);\r\n\r\n        return (\r\n            <div>\r\n                \r\n                <div>\r\n                    <h1>IN DEVELOPMENT------Form v3------IN DEVELOPMENT</h1>\r\n                </div>\r\n\r\n                <div>\r\n                <form onSubmit={this.onSubmit}>\r\n\r\n                    {this.state.currentQuestion === \"q1\" && (\r\n                        <Question1 initialvalue={answers[\"q1\"]} onSubmit={this.onQuestionSubmit} onChange={this.onQuestionResponseChange} user={this.props.user}></Question1>\r\n                    )}\r\n                    \r\n                    \r\n                    {this.state.currentQuestion === \"q1a\" && (\r\n                        <Question1a initialvalue={answers[\"q1a\"]} onSubmit={this.onQuestionSubmit} onChange={this.onQuestionResponseChange} user={this.props.user}></Question1a>\r\n                    )}\r\n\r\n                    {this.state.currentQuestion === \"q2\" && (\r\n                        <Question2 initialvalue={answers[\"q2\"]} onSubmit={this.onQuestionSubmit} onChange={this.onQuestionResponseChange} user={this.props.user}></Question2>\r\n                    )}\r\n\r\n                    {this.state.currentQuestion === \"q3\" && (\r\n                        <Question3 initialvalue={answers[\"q3\"]} onSubmit={this.onQuestionSubmit} onChange={this.onQuestionResponseChange} user={this.props.user}></Question3>\r\n                    )}\r\n\r\n                    {this.state.currentQuestion === \"q4\" && (\r\n                        <Question4 initialvalue={answers[\"q4\"]} onSubmit={this.onQuestionSubmit} onChange={this.onQuestionResponseChange} user={this.props.user}></Question4>\r\n                    )}\r\n\r\n                    <button type=\"button\" className=\"last-question-btn\" onClick={this.onBackButton} disabled={currentQuestion === \"q1\"}>Last Question</button>\r\n                    <button type=\"button\" className=\"info-btn\" onClick={this.onInfoButton}>More Info</button>\r\n\r\n                    <button type=\"button\" className=\"open-navigation-btn\" onClick={this.onNavButton}>Navigation</button>\r\n\r\n                    <div className=\"progress-bar-stuff\">\r\n                        <div className=\"progress-bar-container\">\r\n                            <div className=\"progress-bar\" style={{width: progressBarStylePercent + '%'}}>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"progress-bar-label\">{`${progressBarPercentRounded}%`}</div>  \r\n                    </div>\r\n                </form>\r\n                \r\n                {this.state.showInfoState && (\r\n                    <Infotest currentQuestion={currentQuestion}></Infotest>\r\n                )}\r\n                {this.state.navButton && (\r\n                    <NavMenu valueq1={answers[\"q1\"]} valueq1a={answers[\"q1a\"]} valueq2={answers[\"q2\"]} valueq3={answers[\"q3\"]} valueq4={answers[\"q4\"]} onSubmit={this.jumpQuestions}></NavMenu>\r\n                )}\r\n                <PDFButton answers={answers} user={this.props.user}></PDFButton>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormV3","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Questions\\Question1.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Questions\\Question4.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Questions\\Question1a.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Questions\\Question3.js",["103"],"import React, { Component } from 'react'\r\n\r\nclass Question3 extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            currentAnswerValue: props.initialvalue\r\n        }\r\n    }\r\n    \r\n    componentDidUpdate = () =>{\r\n        const {currentAnswerValue} = this.state;\r\n        this.props.onChange(\"q3\", currentAnswerValue)\r\n    }\r\n    \r\n    renderQuestion = (questionString) =>{\r\n        return questionString;\r\n    }\r\n    \r\n    onQ3Unfocused = (event) => {\r\n        const {currentAnswerValue} = this.state;\r\n\r\n        const updateAnswerQ3ToDbBody = {\r\n            userID: this.props.user.id,\r\n            userName: this.props.user.name,\r\n            currAnswer: currentAnswerValue,\r\n            question: `answer_q3`\r\n        }\r\n\r\n        fetch(\"http://localhost:3001/questionAnswer\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            credentials: \"include\",\r\n            body: JSON.stringify(updateAnswerQ3ToDbBody) \r\n        }).then((res) => {\r\n            return res.json();\r\n        }).then((parsedResponse) => {\r\n            console.log(parsedResponse);\r\n        })\r\n\r\n    }\r\n\r\n    onHandleInput = (event) => {\r\n        const {currentAnswerValue} = this.state;\r\n        event.preventDefault();\r\n        \r\n        this.setState({\r\n            currentAnswerValue: event.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit = (event) =>{\r\n        const {currentAnswerValue} = this.state;\r\n        event.preventDefault();\r\n\r\n        if(!currentAnswerValue){\r\n            return;\r\n        }\r\n\r\n        this.props.onSubmit(\"q3\",currentAnswerValue);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {this.renderQuestion(\"Question 3\")}\r\n                </div>\r\n                <div>\r\n                    <input className=\"q3-input\" onInput={this.onHandleInput} value={this.state.currentAnswerValue} onBlur={this.onQ3Unfocused}></input>\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\" className=\"next-question-btn\" onClick={this.onSubmit}>Next Question</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question3","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Info\\Infotest.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Questions\\Question2.js",["104"],"import React, { Component } from 'react'\r\n\r\nclass Question2 extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            currentAnswerValue: props.initialvalue\r\n        }\r\n    }\r\n    \r\n    componentDidUpdate = () =>{\r\n        const {currentAnswerValue} = this.state;\r\n        this.props.onChange(\"q2\", currentAnswerValue)\r\n    }\r\n\r\n    renderQuestion = (questionString) =>{\r\n        return questionString;\r\n    }\r\n    \r\n    onQ2Unfocused = (event) => {\r\n        const {currentAnswerValue} = this.state;\r\n\r\n        const updateAnswerQ2ToDbBody = {\r\n            userID: this.props.user.id,\r\n            userName: this.props.user.name,\r\n            currAnswer: currentAnswerValue,\r\n            question: `answer_q2`\r\n        }\r\n\r\n        fetch(\"http://localhost:3001/questionAnswer\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            credentials: \"include\",\r\n            body: JSON.stringify(updateAnswerQ2ToDbBody) \r\n        }).then((res) => {\r\n            return res.json();\r\n        }).then((parsedResponse) => {\r\n            console.log(parsedResponse);\r\n        })\r\n\r\n    }\r\n\r\n    onHandleInput = (event) => {\r\n        const {currentAnswerValue} = this.state;\r\n        event.preventDefault();\r\n        \r\n        this.setState({\r\n            currentAnswerValue: event.target.value\r\n        })\r\n\r\n    }\r\n\r\n    onSubmit = (event) =>{\r\n        const {currentAnswerValue} = this.state;\r\n        event.preventDefault();\r\n\r\n        if(!currentAnswerValue){\r\n            return;\r\n        }\r\n\r\n        this.props.onSubmit(\"q2\",currentAnswerValue);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {this.renderQuestion(\"Question 2\")}\r\n                </div>\r\n                <div>\r\n                    <input className=\"q2-input\" onInput={this.onHandleInput} value={this.state.currentAnswerValue} onBlur={this.onQ2Unfocused}></input>\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\" className=\"next-question-btn\" onClick={this.onSubmit}>Next Question</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question2","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\Nav\\NavMenu.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\PDFbutton.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\pdfButton.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\PDFButton.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\ClientList.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\AddClients.js",[],"C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\ClientListRow.js",["105","106"],"import React, { Component } from 'react'\r\n\r\nconst allClients = {\r\n    \r\n};\r\n\r\nclass ClientListRow extends Component {\r\n   \r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             currentClient: this.props.currentClient,\r\n        }\r\n    }\r\n\r\n   \r\n    handleNameInput = (event) => {\r\n        \r\n    }\r\n    handleAddressInput = (event) => {\r\n        \r\n    }\r\n    handleCityInput = (event) => {\r\n        \r\n    }\r\n    handleTelephoneInput = (event) => {\r\n        \r\n    }\r\n    handleEmailInput = (event) => {\r\n        \r\n    }\r\n\r\n    handleDeleteBtn = (event) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        const {currentClient} = this.state;\r\n        // const currentName = this.props.allClients[currentClient].name\r\n        // const currentAddress = this.props.allClients[currentClient].address\r\n        // const currentCity = this.props.allClients[currentClient].city\r\n        // const currentTelephone = this.props.allClients[currentClient].phone\r\n        // const currentEmail = this.props.allClients[currentClient].email\r\n\r\n        const {test2d, clientnum} = this.props;\r\n        const currentName = test2d[clientnum][0];\r\n        const currentAddress = test2d[clientnum][1];\r\n        const currentCity = test2d[clientnum][2];\r\n        const currentTelephone = test2d[clientnum][3];\r\n        const currentEmail = test2d[clientnum][4];\r\n        return (\r\n            <div>\r\n                <div className=\"client-list-container\">\r\n                    <div className=\"label-input-container\">\r\n                        <input type=\"text\" className=\"addclient-input-fields\" value={currentName} onChange={this.handleNameInput} readOnly={true}></input>\r\n                    </div>\r\n                    <div className=\"label-input-container\">\r\n                        <input type=\"text\" className=\"addclient-input-fields\" value={currentAddress} onChange = {this.handleAddressInput} readOnly={true}></input>\r\n                    </div>\r\n                    <div className=\"label-input-container\">\r\n                        <input type=\"text\" className=\"addclient-input-fields\" value={currentCity} onChange = {this.handleCityInput} readOnly={true}></input>\r\n                    </div>\r\n                    <div className=\"label-input-container\">\r\n                        <input type=\"text\" className=\"addclient-input-fields\" value={currentTelephone} onChange = {this.handleTelephoneInput} readOnly={true}></input>\r\n                    </div>\r\n                    <div className=\"label-input-container\">\r\n                        <input type=\"text\" className=\"addclient-input-fields\" value={currentEmail} onChange = {this.handleEmailInput} readOnly={true}></input>\r\n                    </div>\r\n                </div>\r\n                {/* <button className=\"client-delete-btn\" onClick={this.handleDeleteBtn}>delete</button> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClientListRow\r\n","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\ClientListAttempt2.js",["107","108","109","110","111","112","113","114","115","116"],"import React, { Component } from 'react'\r\nimport ClientListShow from './ClientListShow';\r\nimport ClientListRow from './ClientListRow';\r\n\r\nlet addClientFields = {\r\n    \"nameField\": \"\",\r\n    \"addressField\": \"\",\r\n};\r\n\r\nlet tempArray = [];\r\n\r\nlet test2d = [\r\n\r\n];\r\n\r\nlet helperButtonStateVar = 0;\r\n\r\nlet buttonHelper2d = [];\r\n\r\nlet new2dArray = [];\r\n\r\nlet temp1darray = [];\r\n\r\nclass ClientListAttempt2 extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            counter: 0,\r\n            counter2: 0,\r\n            showAddClient: false,\r\n            helperStateVar: 0,\r\n            //need delete buttons to show up without using search function\r\n        }\r\n    }\r\n\r\n    sort2dArr = (a, b) => {\r\n        if (a[0] === b[0]) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return (a[0] < b[0]) ? -1 : 1;\r\n        }\r\n    }\r\n\r\n    insertInfo = (event, inputType) => {\r\n        test2d.push(tempArray);\r\n    }\r\n\r\n    handleNameInput = (event) => {\r\n        tempArray[0] = (event.target.value);\r\n    }\r\n    handleAddressInput = (event) => {\r\n        tempArray[1] = (event.target.value);\r\n    }\r\n    handleCityInput = (event) => {\r\n        tempArray[2] = (event.target.value);\r\n    }\r\n    handleTelephoneInput = (event) => {\r\n        tempArray[3] = (event.target.value);\r\n    }\r\n    handleEmailInput = (event) => {\r\n        tempArray[4] = (event.target.value);\r\n    }\r\n\r\n    handleNewClientBtnPress = (event) => {\r\n        event.preventDefault();\r\n        test2d.push(tempArray.slice());\r\n\r\n        // const updateClientToDB = {\r\n        //     userID: this.props.user.id,\r\n        //     userName: this.props.user.name,\r\n        //     clientNum: this.state.counter,\r\n        //     clientName: test2d[test2d.length-1][0]\r\n        // }\r\n        // console.log(updateClientToDB.clientName);\r\n\r\n        // fetch(\"http://localhost:3001/insertClientToDB\", {\r\n        //     method: \"POST\",\r\n        //     headers: {\r\n        //         \"Content-Type\": \"application/json\"\r\n        //     },\r\n        //     credentials: \"include\",\r\n        //     body: JSON.stringify(updateClientToDB) \r\n        // }).then((res) => {\r\n        //     return res.json();\r\n        // }).then((parsedResponse) => {\r\n        //     console.log(parsedResponse);\r\n        // })\r\n\r\n        console.log(test2d);\r\n        test2d.sort(this.sort2dArr);\r\n        this.setState({\r\n            counter: this.state.counter + 1\r\n        })\r\n\r\n        document.getElementById('addclient-name-input').value = '';\r\n        document.getElementById('addclient-address-input').value = '';\r\n        document.getElementById('addclient-city-input').value = '';\r\n        document.getElementById('addclient-phone-input').value = '';\r\n        document.getElementById('addclient-email-input').value = '';\r\n        for (let j = 0; j < tempArray.length; j++) {\r\n            tempArray[j] = \"\";\r\n        }\r\n        this.forceUpdate();\r\n\r\n    }\r\n\r\n    showAddClient = (event) => {\r\n\r\n        if (this.state.showAddClient) {\r\n            this.setState({\r\n                showAddClient: false\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                showAddClient: true\r\n            })\r\n        }\r\n    }\r\n\r\n    helperFunction = (helperVariable) => {\r\n        let twodtopush;\r\n        let displayArr1 = [];\r\n        let displayArr2 = [];\r\n        let row;\r\n        if (helperVariable == 0) {\r\n            twodtopush = test2d;\r\n            row = test2d.map((x) => x);\r\n            for (let i = 0; i < row.length; i++) {\r\n                displayArr1.push(<ClientListRow key={i} test2d={twodtopush} clientnum={i} />)\r\n            }\r\n            return displayArr1;\r\n        }\r\n\r\n        if (helperVariable == 1) {\r\n            twodtopush = new2dArray;\r\n            row = new2dArray.map((x) => x);\r\n            for (let i = 0; i < row.length; i++) {\r\n                displayArr2.push(<ClientListRow key={i} test2d={twodtopush} clientnum={i} />)\r\n            }\r\n            return displayArr2;\r\n        }\r\n    }\r\n\r\n    search2d = (event) => {\r\n        //Force everything to be standardized no capital letters or all beginning with capital letters\r\n        if (event.target.value != \"\") {\r\n            this.setState({\r\n                helperStateVar: 1\r\n            })\r\n            helperButtonStateVar = 1;\r\n        }\r\n        else{\r\n            this.setState({\r\n                helperStateVar: 0\r\n            })\r\n            helperButtonStateVar = 0;\r\n        }\r\n\r\n\r\n        let arr = test2d.map((x) => x);\r\n        let input = event.target.value;\r\n        let helperArray = [];\r\n\r\n        for (var z = 0; z < arr.length; z++) {\r\n            for (let f = 0; f < arr[z].length; f++) {\r\n                if (arr[z][f].includes(input)) {\r\n                    console.log(`${arr[z][f]} -- ${z} -- ${f}`);\r\n                    if(!(helperArray.includes(arr[z]))){\r\n                        helperArray.push(arr[z]);\r\n                    }\r\n                    else{\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n            // if (arr[z].indexOf(input) !== -1) {\r\n            //     //Found\r\n            //     console.log(`${arr[z][arr[z].indexOf(input)]} -- ${z} -- ${arr[z].indexOf(input)}`);\r\n            //     break;\r\n            // }\r\n        }\r\n        new2dArray = helperArray;\r\n        buttonHelper2d = helperArray;\r\n        console.log(new2dArray);\r\n\r\n\r\n    }\r\n\r\n    buttonHelperFunction = () => {\r\n        if(helperButtonStateVar == 0){\r\n            buttonHelper2d = test2d.map((x) => x);;\r\n        }\r\n        let displayArr = [];\r\n        let row = buttonHelper2d.map((x) => x);\r\n        for (let i = 0; i < row.length; i++) {\r\n            displayArr.push(<button key={i} className=\"delete-btns\" onClick={() => this.deleteButtons(i)}>delete</button>)\r\n        }\r\n        return displayArr;\r\n    }\r\n\r\n    deleteButtons = (i, event) => {\r\n        if(helperButtonStateVar == 0){\r\n            test2d.splice(i, 1);\r\n        }\r\n        buttonHelper2d.splice(i, 1);\r\n        console.log(`Delete${i}`);\r\n        console.log(test2d);\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.showAddClient} className=\"add-new-client-menu-btn\">Add New Client</button>\r\n                <input type=\"text\" className=\"search-client-list-input\" onInput={this.search2d}></input>\r\n\r\n                {(this.state.showAddClient &&\r\n                    <form className=\"addclient-container\">\r\n                        <div className=\"label-input-container\">\r\n                            <label>Name</label>\r\n                            <input type=\"text\" className=\"addclient-input-fields\" id=\"addclient-name-input\" onInput={this.handleNameInput} onBlur={this.handleOnBlur}></input>\r\n                        </div>\r\n                        <div className=\"label-input-container\">\r\n                            <label>Street Address</label>\r\n                            <input type=\"text\" className=\"addclient-input-fields\" id=\"addclient-address-input\" onChange={this.handleAddressInput} onBlur={this.handleOnBlur}></input>\r\n                        </div>\r\n                        <div className=\"label-input-container\">\r\n                            <label>City</label>\r\n                            <input type=\"text\" className=\"addclient-input-fields\" id=\"addclient-city-input\" onChange={this.handleCityInput} onBlur={this.handleOnBlur}></input>\r\n                        </div>\r\n                        <div className=\"label-input-container\">\r\n                            <label>Telephone Number</label>\r\n                            <input type=\"text\" className=\"addclient-input-fields\" id=\"addclient-phone-input\" onChange={this.handleTelephoneInput} onBlur={this.handleOnBlur}></input>\r\n                        </div>\r\n                        <div className=\"label-input-container\">\r\n                            <label>Email Address</label>\r\n                            <input type=\"text\" className=\"addclient-input-fields\" id=\"addclient-email-input\" onChange={this.handleEmailInput} onBlur={this.handleOnBlur}></input>\r\n                        </div>\r\n                        <div>\r\n                            <button onClick={this.handleNewClientBtnPress} type=\"submit\" className=\"insert-client-btn\">click</button>\r\n                        </div>\r\n                    </form>\r\n                )}\r\n                <div className=\"ui-database-container\">\r\n                    <div className=\"ui-database-row-container\">\r\n                        {(this.state.helperStateVar == 0 &&\r\n                            this.helperFunction(0)\r\n                        )}\r\n                        {(this.state.helperStateVar == 1 &&\r\n                            this.helperFunction(1)\r\n                        )}\r\n                    </div>\r\n                    <div className=\"ui-database-delete-container\">\r\n                        {this.buttonHelperFunction()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClientListAttempt2","C:\\Users\\sawye\\Coding\\FreeBirdProj\\main-app\\src\\components\\ClientListShow.js",["117"],"import React, { Component } from 'react'\r\n\r\n\r\nclass ClientListShow extends Component {\r\n   \r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n        }\r\n    }\r\n   \r\n    handleNameInput = (event) => {\r\n        \r\n    }\r\n    handleAddressInput = (event) => {\r\n        \r\n    }\r\n    handleCityInput = (event) => {\r\n        \r\n    }\r\n    handleTelephoneInput = (event) => {\r\n        \r\n    }\r\n    handleEmailInput = (event) => {\r\n        \r\n    }\r\n\r\n    helperFunction = (event) => {\r\n        const {currentClient} = this.state;\r\n        const {test2d, clientnum} = this.props;\r\n        const currentName = test2d[clientnum][0];\r\n        const currentAddress = test2d[clientnum][1];\r\n        const currentCity = test2d[clientnum][2];\r\n        const currentTelephone = test2d[clientnum][3];\r\n        const currentEmail = test2d[clientnum][4];\r\n        let row = [];\r\n        let fixr = [currentName, currentAddress, currentCity, currentTelephone, currentEmail];\r\n        for(let i=0; i< 5; i++){\r\n            row.push(<input key={i} className=\"elements-in-row\" readOnly={true} value={fixr[i]}/>)\r\n        }\r\n        return row;\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n            \r\n            <div className=\"row-container-clientlist\">\r\n                {this.helperFunction()}\r\n                {/* {this.props.test2d.map((name, index) => (\r\n                <div key={index}>\r\n                    <div className=\"show-row-container\">\r\n                        <div>{currentName}</div>\r\n                        <div>{currentAddress}</div>\r\n                        <div>{currentCity}</div>\r\n                        <div>{currentTelephone}</div>\r\n                        <div>{currentEmail}</div>\r\n                    </div>\r\n                </div>\r\n                ))} */}\r\n            </div>\r\n\r\n\r\n            {/* <table className=\"client-list-table\">\r\n                <thead> \r\n                    <tr className=\"client-list-table-headerrow\">\r\n                        <th>Name</th>\r\n                        <th>Address</th>\r\n                        <th>City</th>\r\n                        <th>Telephone</th>\r\n                        <th>Email</th>\r\n                    </tr>    \r\n                </thead> \r\n                <tbody className=\"client-list-table-body\"> \r\n                <tr className=\"client-list-table-row\">\r\n                    <td className=\"client-list-table-data\">{currentName}</td>\r\n                    <td className=\"client-list-table-data\">{currentAddress}</td>\r\n                    <td className=\"client-list-table-data\">{currentCity}</td>\r\n                    <td className=\"client-list-table-data\">{currentTelephone}</td>\r\n                    <td className=\"client-list-table-data\">{currentEmail}</td>\r\n                </tr>\r\n                <tr className=\"client-list-table-row\">\r\n                    <td className=\"client-list-table-data\">d</td>\r\n                    <td className=\"client-list-table-data\">d</td>\r\n                    <td className=\"client-list-table-data\">d</td>\r\n                    <td className=\"client-list-table-data\">d</td>\r\n                    <td className=\"client-list-table-data\">d</td>\r\n                </tr>\r\n                </tbody>\r\n            </table> */}\r\n\r\n            {/* <div className=\"client-list-container\">\r\n                <div className=\"label-input-container\">\r\n                    <input type=\"text\" className=\"addclient-input-fields\" value={currentName} onChange={this.handleNameInput}></input>\r\n                </div>\r\n                <div className=\"label-input-container\">\r\n                    <input type=\"text\" className=\"addclient-input-fields\" value={currentAddress} onChange = {this.handleAddressInput}></input>\r\n                </div>\r\n                <div className=\"label-input-container\">\r\n                    <input type=\"text\" className=\"addclient-input-fields\" value={currentCity} onChange = {this.handleCityInput}></input>\r\n                </div>\r\n                <div className=\"label-input-container\">\r\n                    <input type=\"text\" className=\"addclient-input-fields\" value={currentTelephone} onChange = {this.handleTelephoneInput}></input>\r\n                </div>\r\n                <div className=\"label-input-container\">\r\n                    <input type=\"text\" className=\"addclient-input-fields\" value={currentEmail} onChange = {this.handleEmailInput}></input>\r\n                </div>\r\n            </div> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClientListShow\r\n",{"ruleId":"118","severity":1,"message":"119","line":4,"column":20,"nodeType":"120","messageId":"121","endLine":4,"endColumn":26},{"ruleId":"118","severity":1,"message":"122","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":14},{"ruleId":"118","severity":1,"message":"123","line":48,"column":16,"nodeType":"120","messageId":"121","endLine":48,"endColumn":34},{"ruleId":"118","severity":1,"message":"123","line":48,"column":16,"nodeType":"120","messageId":"121","endLine":48,"endColumn":34},{"ruleId":"118","severity":1,"message":"124","line":3,"column":7,"nodeType":"120","messageId":"121","endLine":3,"endColumn":17},{"ruleId":"118","severity":1,"message":"125","line":39,"column":16,"nodeType":"120","messageId":"121","endLine":39,"endColumn":29},{"ruleId":"118","severity":1,"message":"126","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":22},{"ruleId":"118","severity":1,"message":"127","line":5,"column":5,"nodeType":"120","messageId":"121","endLine":5,"endColumn":20},{"ruleId":"118","severity":1,"message":"128","line":22,"column":5,"nodeType":"120","messageId":"121","endLine":22,"endColumn":16},{"ruleId":"129","severity":1,"message":"130","line":128,"column":28,"nodeType":"131","messageId":"132","endLine":128,"endColumn":30},{"ruleId":"129","severity":1,"message":"130","line":137,"column":28,"nodeType":"131","messageId":"132","endLine":137,"endColumn":30},{"ruleId":"129","severity":1,"message":"133","line":149,"column":32,"nodeType":"131","messageId":"132","endLine":149,"endColumn":34},{"ruleId":"129","severity":1,"message":"130","line":193,"column":33,"nodeType":"131","messageId":"132","endLine":193,"endColumn":35},{"ruleId":"129","severity":1,"message":"130","line":205,"column":33,"nodeType":"131","messageId":"132","endLine":205,"endColumn":35},{"ruleId":"129","severity":1,"message":"130","line":249,"column":53,"nodeType":"131","messageId":"132","endLine":249,"endColumn":55},{"ruleId":"129","severity":1,"message":"130","line":252,"column":53,"nodeType":"131","messageId":"132","endLine":252,"endColumn":55},{"ruleId":"118","severity":1,"message":"125","line":30,"column":16,"nodeType":"120","messageId":"121","endLine":30,"endColumn":29},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'currentAnswerValue' is assigned a value but never used.","'allClients' is assigned a value but never used.","'currentClient' is assigned a value but never used.","'ClientListShow' is defined but never used.","'addClientFields' is assigned a value but never used.","'temp1darray' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='."]